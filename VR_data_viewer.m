function varargout = VR_data_viewer(varargin)
% VR_DATA_VIEWER MATLAB code for VR_data_viewer.fig
%      VR_DATA_VIEWER, by itself, creates a new VR_DATA_VIEWER or raises the existing
%      singleton*.
%
%      H = VR_DATA_VIEWER returns the handle to a new VR_DATA_VIEWER or the handle to
%      the existing singleton*.
%
%      VR_DATA_VIEWER('CALLBACK',hObject,eventData,handles,...) calls the local
%      function named CALLBACK in VR_DATA_VIEWER.M with the given input arguments.
%
%      VR_DATA_VIEWER('Property','Value',...) creates a new VR_DATA_VIEWER or raises the
%      existing singleton*.  Starting from the left, property value pairs are
%      applied to the GUI before VR_data_viewer_OpeningFcn gets called.  An
%      unrecognized property name or invalid value makes property application
%      stop.  All inputs are passed to VR_data_viewer_OpeningFcn via varargin.
%
%      *See GUI Options on GUIDE's Tools menu.  Choose "GUI allows only one
%      instance to run (singleton)".
%
% See also: GUIDE, GUIDATA, GUIHANDLES

% Edit the above text to modify the response to help VR_data_viewer

% Last Modified by GUIDE v2.5 14-May-2017 20:40:55

% Begin initialization code - DO NOT EDIT

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% This GUI can be used to view batch actions files generated by MiceVR. It
% currently plots the performance (accurancy, time spend on each trial,
% correct/wrong throughout each trainings), it also plots for the potential
% motor bias or stimulus bias as total trial counts for different
% categories.

% copyright Sabrina Pei Xu (2017)
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

gui_Singleton = 1;
gui_State = struct('gui_Name',       mfilename, ...
                   'gui_Singleton',  gui_Singleton, ...
                   'gui_OpeningFcn', @VR_data_viewer_OpeningFcn, ...
                   'gui_OutputFcn',  @VR_data_viewer_OutputFcn, ...
                   'gui_LayoutFcn',  [] , ...
                   'gui_Callback',   []);
if nargin && ischar(varargin{1})
    gui_State.gui_Callback = str2func(varargin{1});
end

if nargout
    [varargout{1:nargout}] = gui_mainfcn(gui_State, varargin{:});
else
    gui_mainfcn(gui_State, varargin{:});
end
% End initialization code - DO NOT EDIT


% --- Executes just before VR_data_viewer is made visible.
function VR_data_viewer_OpeningFcn(hObject, eventdata, handles, varargin)
% This function has no output args, see OutputFcn.
% hObject    handle to figure
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)
% varargin   command line arguments to VR_data_viewer (see VARARGIN)

set(handles.plotArea, 'Visible', 'off')
handles = initialization(handles);

% Choose default command line output for VR_data_viewer
handles.output = hObject;

% Update handles structure
guidata(hObject, handles);

% UIWAIT makes VR_data_viewer wait for user response (see UIRESUME)
% uiwait(handles.figure1);


% --- Outputs from this function are returned to the command line.
function varargout = VR_data_viewer_OutputFcn(hObject, eventdata, handles) 
% varargout  cell array for returning output args (see VARARGOUT);
% hObject    handle to figure
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Get default command line output from handles structure
varargout{1} = handles.output;

function handles = initialization(handles)
% initial setting of the gui
set(handles.plotArea, 'Visible', 'off')
% handles.ghosthax = axes('Units', get(handles.plotArea, 'Units'), ...
%     'Position', get(handles.plotArea, 'Position'));
% set(handles.fileList, 'Min', 0, 'Max', 2, 'String', {'Select all', 'Select none'})

% --- Executes on selection change in fileList.
function fileList_Callback(hObject, eventdata, handles)
% hObject    handle to fileList (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hints: contents = cellstr(get(hObject,'String')) returns fileList contents as cell array
%        contents{get(hObject,'Value')} returns selected item from fileList

% --- Executes during object creation, after setting all properties.
function fileList_CreateFcn(hObject, eventdata, handles)
% hObject    handle to fileList (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    empty - handles not created until after all CreateFcns called

% Hint: listbox controls usually have a white background on Windows.
%       See ISPC and COMPUTER.
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end

% --- Executes on selection change in selectFiles.
function selectFiles_Callback(hObject, eventdata, handles)
% hObject    handle to selectFiles (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hints: contents = cellstr(get(hObject,'String')) returns selectFiles contents as cell array
%        contents{get(hObject,'Value')} returns selected item from selectFiles
[fileName, pathName] = uigetfile('~/Data/data_dir/behData/mouseVR/actions/*.*','Select file','MultiSelect','on');
if ~iscell(fileName)
   fileName = {fileName};  
end
handles.fileName = fileName;
handles.pathName = pathName;
fileList = findobj('Tag', 'fileList');
set(fileList, 'String', fileName, 'Min', 0, 'Max', length(fileName), ...
    'Value', 1:length(fileName))

% load files
handles = load_files(handles);

% show plot for all files
handles = update_plot(hObject, handles);

guidata(hObject, handles)

function handles = load_files(handles)
% update the plot
fileList = findobj('Tag', 'fileList');
fileIdx = get(fileList, 'Value');
n_file = length(fileIdx);
selectFields = {'RewardSize(ul)', 'TargetLocation', 'TurnLocation', ...
    'TurnHFreq', 'TurnVFreq', 'TrialDur'};
for i = 1:n_file
    thisFile = [handles.pathName handles.fileName{fileIdx(i)}];
    % read data from actions.txt file
    data = read_actions_file(thisFile, selectFields); 
    handles.data{i} = data;
end

% --- Executes during object creation, after setting all properties.
function selectFiles_CreateFcn(hObject, eventdata, handles)
% hObject    handle to selectFiles (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    empty - handles not created until after all CreateFcns called

% Hint: popupmenu controls usually have a white background on Windows.
%       See ISPC and COMPUTER.
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end

% --- Executes on button press in update.
function update_Callback(hObject, eventdata, handles)
% hObject    handle to update (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)
update_plot(hObject, handles);

function handles = update_plot(hObject,handles)
% find the currently select files
fileList = findobj('Tag', 'fileList');
fileIdx = get(fileList, 'Value');
n_file = length(fileIdx);
% creat the axis for plots
handles = splitPlotArea(handles, n_file);

% plot each file one by one
if get(findobj('Tag', 'colorize'), 'Value');

col = distinguishable_colors(n_file);
else
    col = repmat([135 206 250]/255,n_file, 1);
end
for i = 1:n_file
    thisdata = handles.data{fileIdx(i)};   
    plot_behavior(thisdata, handles.shax(i), handles.rhax(i), col(i,:))
    % label the plot
    s = handles.fileName{fileIdx(i)};
    idx1 = findstr(s, '-');
    idx2 = findstr(s, 'actions');
    s = s(idx1(1)+1:idx2-2);
    t = title(handles.shax(i), s, 'Interpreter','none');
end
set(handles.shax(i+1:end), 'Visible', 'off')
set(handles.rhax(i+1:end), 'Visible', 'off')

% plot statistics across sessions
% plot motor bias
haxLR = handles.LRturn;
% figure('Name', 'RLturn','Units', 'inches','Position',[0 0 11 8.5],...
%     'Color',[1 1 1]);
%     set(gca,'Position',[0.1 0.1 0.05 0.2])
% haxLR = gca;
[stats_LR, turnLbl] = get_LR_stats(handles.data(fileIdx));
plot_stats(stats_LR, haxLR)
lbl = cell(1,size(turnLbl,1));
if any(turnLbl == 19990)
lbl{turnLbl == 19990} = 'left';
end
if any(turnLbl == 20010)
lbl{turnLbl == 20010} = 'right';
end
if any(turnLbl == 20000)
lbl{turnLbl == 20000} = 'linear';
end
set(haxLR, 'XTick', 1:length(lbl), 'XTickLabel', lbl)
clear lbl
% export_fig('RLturn', '-eps', gcf)


haxHV = handles.HVturn;
% figure('Name', 'HVturn','Units', 'inches','Position',[0 0 11 8.5],...
%     'Color',[1 1 1]);
%     set(gca,'Position',[0.1 0.1 0.05 0.2])
% haxHV = gca;
[stats_HV, HVlbl] = get_HV_stats(handles.data(fileIdx));
plot_stats(stats_HV, haxHV)
lbl = cell(1,size(HVlbl,1));
if any(ismember(HVlbl, [4 1], 'rows'))
    lbl{ismember(HVlbl, [4 1], 'rows')} = '0';
end
if any(ismember(HVlbl, [1 4], 'rows'))
    lbl{ismember(HVlbl, [1 4], 'rows')} = '90';
end
if any(ismember(HVlbl, [1 1], 'rows'))
    lbl{ismember(HVlbl, [1 1], 'rows')} = 'S';
end
if any(ismember(HVlbl, [4 4], 'rows'))
    lbl{ismember(HVlbl, [4 4], 'rows')} = 'C';
end
set(haxHV, 'XTick', 1:length(lbl),'XTickLabel', lbl)
% export_fig('HVturn', '-eps', gcf)

if get(findobj('Tag', 'exportFigure'), 'Value')
    export_fig(get(findobj('Tag', 'figureName'), 'String'), '-eps', handles.hfexport)
end

% Update handles structure
guidata(hObject, handles);

function handles = splitPlotArea(handles, n)
[row, col] = chooseSubPlot(n);
gapfrac = 0.25;
[xsplit, ysplit] = chooseXYsplit(row, col, gapfrac);
if isfield(handles, 'shax')
    for i = 1:numel(handles.shax)
        if ishandle(handles.shax(i))
           delete(handles.shax(i))
        end
    end
    handles = rmfield(handles, 'shax');
end

handles.ghosthax = axes('Units', get(handles.plotArea, 'Units'), ...
    'Position', get(handles.plotArea, 'Position'));
set(handles.ghosthax, 'Visible', 'off')
handles.shax = SplitGrid(xsplit, ysplit, handles.ghosthax);
if get(findobj('Tag', 'exportFigure'), 'Value')
    hfexport = figure('Name', get(findobj('Tag', 'figureName'), 'String'),...
        'Units', 'inches','Position',[0 0 11 8.5],...
    'Color',[1 1 1]);
    set(gca,'Position',[0.1 0.1 0.8 0.8])
    handles.shax = SplitGrid(xsplit, ysplit, gca);
    handles.hfexport = hfexport;
end

% create right axis
if isfield(handles, 'rhax')
    for i = 1:numel(handles.rhax)
        if ishandle(handles.rhax(i))
           delete(handles.rhax(i))
        end
    end
    handles = rmfield(handles, 'rhax');
end
for i = 1:numel(handles.shax)
    handles.rhax(i) = axes('Units', get(handles.shax(i), 'Units'), ...
        'Position', get(handles.shax(i), 'Position'),...
        'YAxisLocation', 'right', 'Color', 'none', 'XColor', 'none');
end


function [xsplit, ysplit] = chooseXYsplit(row, column, gapfrac)
xsplit = SplitAxesEvenly(row, gapfrac);
ysplit = SplitAxesEvenly(column, gapfrac);
if isempty(xsplit)
    xsplit = 1;
end
if isempty(ysplit)
ysplit = 1;
end

function [m, n] = chooseSubPlot(x)
m = 1;
% first find the row number (no less than column number)
while x > m^2
    m = m+1;
end
% get the column number
n = ceil(x/m);

function plot_behavior(data, hax, rhax, col)
% plot behavior data
% plot accuracy along trials
rewardTrial = logical(data.RewardSize');
accuracyV = cumsum(rewardTrial)./(1:length(rewardTrial));

axes(hax)
hold(hax, 'on')
% label left and right turns
markLR = findobj('Tag', 'markLeftRight');
if get(markLR, 'Value') == 0
    hp = plot(accuracyV, 'LineWidth', 2);
    if nargin == 4
        set(hp, 'Color', col)
    end
else
    leftTrial = data.TargetLocation == 19990;
    rightTrial = data.TargetLocation == 20010;
    tmp = ones(1, length(leftTrial));
    tmp(rightTrial) = 2;
    col = {'b', 'r'};
    
    for i = 1:length(accuracyV)
        scatter(i, accuracyV(i), 10, col{tmp(i)}, '.');
    end
    clear tmp
end
        
% mark trial by correct/wrong
col = {'g', 'r'}; %color for rewardTrial/giveupTrial/nonRewardTrial
tmp{1} = logical(data.RewardSize');
tmp{2} = ~tmp{1};
for i = 1:length(col)
    thisTrial = find(tmp{i});
    n_thisTrial = length(thisTrial);
    x2plot([1 4],:) = repmat(thisTrial-0.5, [2 1]);
    x2plot([2 3],:) = repmat(thisTrial+0.5, [2 1]);
    y2plot([1 2],:) = repmat(1*ones(1,n_thisTrial), [2 1]);
    y2plot([3 4],:) = repmat(1.1*ones(1,n_thisTrial), [2 1]);
    
    patch(x2plot, y2plot, 'none', 'FaceColor', col{i}, ...
        'EdgeColor', 'none', 'FaceAlpha', 0.5)
    clear x2plot y2plot
end
clear tmp

% mark trial by TrialDur
showTrialDur = findobj('tag', 'showTrialDur');
if get(showTrialDur, 'Value')
    col = [0.7 0.7 0.7];
%     if nargin < 3
%     rhax = axes('Units', get(hax, 'Units'), 'Position', get(hax, 'Position'),...
%         'YAxisLocation', 'right', 'Color', 'none', 'XColor', 'none');
%     end
    dur = data.TrialDur;
    dur_mean = mean(dur);
    dur_std = std(dur);
    dur(dur > dur_mean+10*dur_std) = dur_mean+10*dur_std;
    plot(rhax, dur, 'Color', col)
    set(rhax, 'YAxisLocation', 'right', 'Box', 'off', 'YColor', col, ...
        'YLim', [0 30], 'XLim', [-0.5 length(dur)+0.5])
else
    set(rhax, 'Visible', 'off')
end

hold(hax, 'off')
set(hax, 'Color', 'none', 'XLim', [-0.5 length(accuracyV)+0.5], ...
    'YLim', [-0 1.1], 'YTick', 0:0.2:1, 'YGrid', 'on', 'GridLineStyle', ':')

function [p, targetLocationLbl] = get_LR_stats(data)
% plot left right turn (for potential motor bias)
tmp = cellfun(@(x) unique(getfield(x, 'TurnLocation')), data, 'UniformOutput', false);
turnLocationLbl = unique(cat(1, tmp{:}));

tmp = cellfun(@(x) unique(getfield(x, 'TargetLocation')), data, 'UniformOutput', false);
targetLocationLbl = unique(cat(1, tmp{:}));

if ~ismember(turnLocationLbl, targetLocationLbl)
    error('There are turning points not included in the designed targets')
end

n_file = length(data);
n_lbl = length(targetLocationLbl);
p = nan(n_file, n_lbl);
for i = 1:n_lbl
    for fileIdx = 1:n_file
        tmp = sum(data{fileIdx}.TurnLocation == targetLocationLbl(i));
        %tmp0 = sum(data{fileIdx}.TargetLocation == targetLocationLbl(i));
        p(fileIdx,i) = tmp; %tmp/tmp0;
    end
end

function [HV_stats, HVlbl] = get_HV_stats(data)
% plot vertical horizontal grating turn (for potential stimulus bias)
n_file = length(data);
for i = 1:n_file
    HV{i} = [data{i}.TurnHFreq data{i}.TurnVFreq];
end
HVlbl = unique(cat(1,HV{:}), 'rows');
n_lbl = size(HVlbl,1);
for i = 1:n_lbl
    for fileIdx = 1:n_file
        HV_stats(fileIdx, i) = sum(ismember(HV{fileIdx}, HVlbl(i,:), 'rows'));
    end
end

function plot_stats(data, hax)
sz = size(data);
n_data = sz(1);
n_category = sz(2);
if get(findobj('Tag', 'colorize'), 'Value');

col = distinguishable_colors(n_data);
else
    col = repmat([135 206 250]/255,n_data, 1);
end
x2plot = 1:n_category;

for i = 1:n_data
    plot(hax, data(i,:), '-o', 'Color', col(i,:))
    hold(hax, 'on')
end
hold(hax, 'off')
          
% --- Executes on button press in markLeftRight.
function markLeftRight_Callback(hObject, eventdata, handles)
% hObject    handle to markLeftRight (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hint: get(hObject,'Value') returns toggle state of markLeftRight


% --- Executes on button press in showTrialDur.
function showTrialDur_Callback(hObject, eventdata, handles)
% hObject    handle to showTrialDur (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hint: get(hObject,'Value') returns toggle state of showTrialDur


% --- Executes on button press in colorize.
function colorize_Callback(hObject, eventdata, handles)
% hObject    handle to colorize (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hint: get(hObject,'Value') returns toggle state of colorize


% --- Executes on button press in exportFigure.
function exportFigure_Callback(hObject, eventdata, handles)
% hObject    handle to exportFigure (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hint: get(hObject,'Value') returns toggle state of exportFigure



function figureName_Callback(hObject, eventdata, handles)
% hObject    handle to figureName (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hints: get(hObject,'String') returns contents of figureName as text
%        str2double(get(hObject,'String')) returns contents of figureName as a double


% --- Executes during object creation, after setting all properties.
function figureName_CreateFcn(hObject, eventdata, handles)
% hObject    handle to figureName (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    empty - handles not created until after all CreateFcns called

% Hint: edit controls usually have a white background on Windows.
%       See ISPC and COMPUTER.
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end
